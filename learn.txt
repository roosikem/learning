@Override
    public void addViewControllers(ViewControllerRegistry registry) {
        // Forward requests starting with /cms to the static index.html
        registry.addViewController("/cms/{spring:[a-zA-Z0-9\\-_]+}")
                .setViewName("forward:/static/index.html");
        registry.addViewController("/cms/**/{spring:[a-zA-Z0-9\\-_]+}")
                .setViewName("forward:/static/index.html");
        registry.addViewController("/cms/{spring:[a-zA-Z0-9\\-_]+}/**{spring:[a-zA-Z0-9\\-_]+}")
                .setViewName("forward:/static/index.html");
registry.addViewController("/cms/{path:^(?!static|api).*$}/**")
                .setViewName("forward:/static/index.html");

registry.addViewController("/cms/{path:^(?!static|api|static/.*\\.css|static/.*\\.js|static/.*\\.png|static/.*\\.jpg|static/.*\\.jpeg|static/.*\\.gif|static/.*\\.svg|static/.*\\.woff|static/.*\\.woff2|static/.*\\.ttf|static/.*\\.eot).*$}/**")
                .setViewName("forward:/static/index.html");
    }

    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        // Map static resources under the /cms path
        registry.addResourceHandler("/cms/static/**")
                .addResourceLocations("classpath:/static/");

// Additionally handle any specific MIME types if needed
        registry.addResourceHandler("/cms/static/css/**").addResourceLocations("classpath:/static/css/");
        registry.addResourceHandler("/cms/static/js/**").addResourceLocations("classpath:/static/js/");
        registry.addResourceHandler("/cms/static/images/**").addResourceLocations("classpath:/static/images/");
    }


 registry.addViewController("/cms/{spring:[a-zA-Z0-9\\-_]+}")
                .setViewName("forward:/static/cms/index.html");
        registry.addViewController("/cms/**/{spring:[a-zA-Z0-9\\-_]+}")
                .setViewName("forward:/static/cms/index.html");
        registry.addViewController("/cms/{spring:[a-zA-Z0-9\\-_]+}/**{spring:[a-zA-Z0-9\\-_]+}")
                .setViewName("forward:/static/cms/index.html");


registry.addViewController("/cms/{path:^(?!static|_next|.*\\..*$).*$}/**")
                .setViewName("forward:/index.html");


@Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        // Serve static resources correctly from the public folder
        registry.addResourceHandler("/**")
                .addResourceLocations("classpath:/public/");
    }


Title: Proxy Error Causing Intermittent Failures in Auth and Message APIs

Description:

We have observed a Proxy Error impacting both the auth API and the message API. The issue is not isolated to the auth API; it affects both APIs due to network disturbances.

Detailed Analysis:
Auth API:
The auth API is failing on the first hit due to the absence of a configured retry count. Since no retry mechanism is in place, the authentication process stops immediately upon encountering the error.
Message API:
The message API also experiences the same proxy-related error. However, it has a retry count configured. The retry mechanism triggers upon failure, leading to a successful response on subsequent attempts.
Root Cause:
The underlying cause appears to be related to network or proxy issues. The proxy error is affecting multiple APIs, not just the auth API. Other APIs are also experiencing impacts due to network disruptions at the same time.
Recommendations:
Configure Retry Mechanism:
Implement a retry mechanism for the auth API, similar to the one used for the message API. This will ensure that the auth API can connect successfully on subsequent attempts if the initial request fails due to a proxy error.
Investigate Network Stability:
Conduct a thorough investigation to identify the root cause of the network disturbances. Understanding and resolving these network issues will be crucial in preventing similar proxy errors across all APIs.



Hi,

Could we schedule a call to discuss an issue I’m facing with entity mapping, specifically with or without using @DBRef?

When I update a child entity individually, the changes are not reflected everywhere, and the system is still returning the old value. I believe it would be helpful to review this together.

Please let me know a convenient time for you.

Thank you!

Hi,

Could we schedule a call to discuss an issue I’m facing with entity mapping, particularly with or without using @DBRef?

The problem occurs when we update an entity individually. If that entity is also part of another entity, the updated details do not reflect when we fetch the other entity. Instead, we still see the old details of the updated entity. I think it would be useful to review this together.

Please let me know a convenient time for you.

Thank you!
